=begin
#GMO Aozora Net Bank Open API

#<p>オープンAPI仕様書（PDF版）は下記リンクをご参照ください</p> <div>   <div style='display:inline-block;'><a style='text-decoration:none; font-weight:bold; color:#00b8d4;' href='https://gmo-aozora.com/business/service/api-specification.html' target='_blank'>オープンAPI仕様書</a></div><div style='display:inline-block; margin-left:2px; left:2px; width:10px; height:10px; border-top:2px solid #00b8d4; border-right:2px solid #00b8d4; transparent;-webkit-transform:rotate(45deg); transform: rotate(45deg);'></div> </div> <h4 style='margin-top:30px; border-left: solid 4px #1B2F48; padding: 0.1em 0.5em; color:#1B2F48;'>共通仕様</h4> <div style='width:100%; margin:10px;'>   <p style='font-weight:bold; color:#616161;'>＜HTTPリクエストヘッダ＞</p>   <div style='display:table; margin-left:10px; background-color:#29659b;'>     <div style='display:table-cell; min-width:130px; padding:9px; border:1px solid #fff; color:#fff;'>項目</div>     <div style='display:table-cell; width:85%; padding:9px; border:1px solid #fff; color:#fff;'>仕様</div>   </div>   <div style='display:table; margin-left:10px;'>     <div style='display:table-cell; min-width:130px; padding:9px; border:1px solid #fff; color:#fff; background-color:#29659b;'>プロトコル</div>     <div style='display:table-cell; width:85%; padding:9px; border:1px solid #fff; background-color:#f8f8f8;'>HTTP1.1/HTTPS</div>   </div>   <div style='display:table; margin-left:10px;'>     <div style='display:table-cell; min-width:130px; padding:9px; border:1px solid #fff; color:#fff; background-color:#29659b;'>charset</div>     <div style='display:table-cell; width:85%; padding:9px; border:1px solid #fff; background-color:#f8f8f8;'>UTF-8</div>   </div>   <div style='display:table; margin-left:10px;'>     <div style='display:table-cell; min-width:130px; padding:9px; border:1px solid #fff; color:#fff; background-color:#29659b;'>content-type</div>     <div style='display:table-cell; width:85%; padding:9px; border:1px solid #fff; background-color:#f8f8f8;'>application/json</div>   </div>   <div style='display:table; margin-left:10px;'>     <div style='display:table-cell; min-width:130px; padding:9px; border:1px solid #fff; color:#fff; background-color:#29659b;'>domain_name</div>     <div style='display:table-cell; width:85%; padding:9px; border:1px solid #fff; background-color:#f8f8f8;'>       本番環境：api.gmo-aozora.com</br>       開発環境：stg-api.gmo-aozora.com     </div>   </div>   <div style='display:table; margin-left:10px;'>     <div style='display:table-cell; min-width:130px; padding:9px; border:1px solid #fff; color:#fff; background-color:#29659b;'>メインURL</div>     <div style='display:table-cell; width:85%; padding:9px; border:1px solid #fff; background-color:#f8f8f8;'>       https://{domain_name}/ganb/api/corporation/{version}</br>       <span style='border-bottom:solid 1px;'>Version:1.x.x</span> の場合</br>       　https://api.gmo-aozora.com/ganb/api/corporation/<span style='border-bottom:solid 1px;'>v1</span>     </div>   </div> </div> <div style='margin:20px 10px;'>   <p style='font-weight:bold; color:#616161;'>＜リクエスト共通仕様＞</p>   <p style='padding-left:20px; font-weight:bold; color:#616161;'>NULLデータの扱い</p>   <p style='padding-left:40px;'>パラメータの値が空の場合、またはパラメータ自体が設定されていない場合、どちらもNULLとして扱います</p> </div> <div style='margin:20px 10px;'>   <p style='font-weight:bold; color:#616161;'>＜レスポンス共通仕様＞</p>   <p style='padding-left:20px; font-weight:bold; color:#616161;'>NULLデータの扱い</p>   <ul>     <li>レスポンスデータ</li>       <ul>         <li style='list-style-type:none;'>レスポンスデータの値が空の場合または、レスポンスデータ自体が設定されない場合は「項目自体を設定しません」と記載</li>       </ul>     <li>配列</li>       <ul>         <li style='list-style-type:none;'>配列の要素の値が空の場合は「空のリスト」と記載</li>         <li style='list-style-type:none;'>配列自体が設定されない場合は「項目自体を設定しません」と記載</li>       </ul>   </ul> </div> <div style='margin:20px 10px;'>   <p style='font-weight:bold; color:#616161;'>＜更新系APIに関する注意事項＞</p>   <ul>     <li style='list-style-type:none;'>更新系処理がタイムアウトとなった場合、処理自体は実行されている可能性がありますので、</li>     <li style='list-style-type:none;'>再実行を行う必要がある場合は必ず照会系の処理で実行状況を確認してから再実行を行ってください</li>   </ul> </div> 

OpenAPI spec version: 1.1.12

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.0

=end

require 'date'

module SwaggerClient
  class VaTransaction
    # 振込入金口座ID 半角数字 振込入金口座を識別するID 
    attr_accessor :va_id

    # 取引日 半角文字 YYYY-MM-DD形式 
    attr_accessor :transaction_date

    # 起算日 半角文字 YYYY-MM-DD形式 
    attr_accessor :value_date

    # 支店コード 半角数字 
    attr_accessor :va_branch_code

    # 支店名カナ 半角文字 
    attr_accessor :va_branch_name_kana

    # 口座番号 半角数字 
    attr_accessor :va_account_number

    # 口座名義カナ 半角文字 
    attr_accessor :va_account_name_kana

    # 入金金額 半角数字 
    attr_accessor :deposit_amount

    # 振込依頼人名カナ 半角文字 
    attr_accessor :remitter_name_kana

    # 仕向金融機関名カナ 半角文字 
    attr_accessor :payment_bank_name

    # 仕向支店名カナ 半角文字 
    attr_accessor :payment_branch_name

    # サービス企業名 全角文字 振込入金口座契約サービス企業名 
    attr_accessor :partner_name

    # 摘要内容 全半角文字 該当データがない場合は項目自体を設定しません 
    attr_accessor :remarks

    # 明細キー 半角数字 口座ID毎に設定される明細キー（明細データtimestamp（μs））
    attr_accessor :item_key

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'va_id' => :'vaId',
        :'transaction_date' => :'transactionDate',
        :'value_date' => :'valueDate',
        :'va_branch_code' => :'vaBranchCode',
        :'va_branch_name_kana' => :'vaBranchNameKana',
        :'va_account_number' => :'vaAccountNumber',
        :'va_account_name_kana' => :'vaAccountNameKana',
        :'deposit_amount' => :'depositAmount',
        :'remitter_name_kana' => :'remitterNameKana',
        :'payment_bank_name' => :'paymentBankName',
        :'payment_branch_name' => :'paymentBranchName',
        :'partner_name' => :'partnerName',
        :'remarks' => :'remarks',
        :'item_key' => :'itemKey'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'va_id' => :'String',
        :'transaction_date' => :'String',
        :'value_date' => :'String',
        :'va_branch_code' => :'String',
        :'va_branch_name_kana' => :'String',
        :'va_account_number' => :'String',
        :'va_account_name_kana' => :'String',
        :'deposit_amount' => :'String',
        :'remitter_name_kana' => :'String',
        :'payment_bank_name' => :'String',
        :'payment_branch_name' => :'String',
        :'partner_name' => :'String',
        :'remarks' => :'String',
        :'item_key' => :'String'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'vaId')
        self.va_id = attributes[:'vaId']
      end

      if attributes.has_key?(:'transactionDate')
        self.transaction_date = attributes[:'transactionDate']
      end

      if attributes.has_key?(:'valueDate')
        self.value_date = attributes[:'valueDate']
      end

      if attributes.has_key?(:'vaBranchCode')
        self.va_branch_code = attributes[:'vaBranchCode']
      end

      if attributes.has_key?(:'vaBranchNameKana')
        self.va_branch_name_kana = attributes[:'vaBranchNameKana']
      end

      if attributes.has_key?(:'vaAccountNumber')
        self.va_account_number = attributes[:'vaAccountNumber']
      end

      if attributes.has_key?(:'vaAccountNameKana')
        self.va_account_name_kana = attributes[:'vaAccountNameKana']
      end

      if attributes.has_key?(:'depositAmount')
        self.deposit_amount = attributes[:'depositAmount']
      end

      if attributes.has_key?(:'remitterNameKana')
        self.remitter_name_kana = attributes[:'remitterNameKana']
      end

      if attributes.has_key?(:'paymentBankName')
        self.payment_bank_name = attributes[:'paymentBankName']
      end

      if attributes.has_key?(:'paymentBranchName')
        self.payment_branch_name = attributes[:'paymentBranchName']
      end

      if attributes.has_key?(:'partnerName')
        self.partner_name = attributes[:'partnerName']
      end

      if attributes.has_key?(:'remarks')
        self.remarks = attributes[:'remarks']
      end

      if attributes.has_key?(:'itemKey')
        self.item_key = attributes[:'itemKey']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @va_id.nil?
        invalid_properties.push('invalid value for "va_id", va_id cannot be nil.')
      end

      if @va_id.to_s.length > 10
        invalid_properties.push('invalid value for "va_id", the character length must be smaller than or equal to 10.')
      end

      if @va_id.to_s.length < 10
        invalid_properties.push('invalid value for "va_id", the character length must be great than or equal to 10.')
      end

      if @transaction_date.nil?
        invalid_properties.push('invalid value for "transaction_date", transaction_date cannot be nil.')
      end

      if @transaction_date.to_s.length > 10
        invalid_properties.push('invalid value for "transaction_date", the character length must be smaller than or equal to 10.')
      end

      if @transaction_date.to_s.length < 10
        invalid_properties.push('invalid value for "transaction_date", the character length must be great than or equal to 10.')
      end

      if @value_date.nil?
        invalid_properties.push('invalid value for "value_date", value_date cannot be nil.')
      end

      if @value_date.to_s.length > 10
        invalid_properties.push('invalid value for "value_date", the character length must be smaller than or equal to 10.')
      end

      if @value_date.to_s.length < 10
        invalid_properties.push('invalid value for "value_date", the character length must be great than or equal to 10.')
      end

      if @va_branch_code.nil?
        invalid_properties.push('invalid value for "va_branch_code", va_branch_code cannot be nil.')
      end

      if @va_branch_code.to_s.length > 3
        invalid_properties.push('invalid value for "va_branch_code", the character length must be smaller than or equal to 3.')
      end

      if @va_branch_code.to_s.length < 3
        invalid_properties.push('invalid value for "va_branch_code", the character length must be great than or equal to 3.')
      end

      if @va_branch_name_kana.nil?
        invalid_properties.push('invalid value for "va_branch_name_kana", va_branch_name_kana cannot be nil.')
      end

      if @va_branch_name_kana.to_s.length > 15
        invalid_properties.push('invalid value for "va_branch_name_kana", the character length must be smaller than or equal to 15.')
      end

      if @va_branch_name_kana.to_s.length < 1
        invalid_properties.push('invalid value for "va_branch_name_kana", the character length must be great than or equal to 1.')
      end

      if @va_account_number.nil?
        invalid_properties.push('invalid value for "va_account_number", va_account_number cannot be nil.')
      end

      if @va_account_number.to_s.length > 7
        invalid_properties.push('invalid value for "va_account_number", the character length must be smaller than or equal to 7.')
      end

      if @va_account_number.to_s.length < 7
        invalid_properties.push('invalid value for "va_account_number", the character length must be great than or equal to 7.')
      end

      if @va_account_name_kana.nil?
        invalid_properties.push('invalid value for "va_account_name_kana", va_account_name_kana cannot be nil.')
      end

      if @va_account_name_kana.to_s.length > 40
        invalid_properties.push('invalid value for "va_account_name_kana", the character length must be smaller than or equal to 40.')
      end

      if @va_account_name_kana.to_s.length < 1
        invalid_properties.push('invalid value for "va_account_name_kana", the character length must be great than or equal to 1.')
      end

      if @deposit_amount.nil?
        invalid_properties.push('invalid value for "deposit_amount", deposit_amount cannot be nil.')
      end

      if @deposit_amount.to_s.length > 20
        invalid_properties.push('invalid value for "deposit_amount", the character length must be smaller than or equal to 20.')
      end

      if @deposit_amount.to_s.length < 1
        invalid_properties.push('invalid value for "deposit_amount", the character length must be great than or equal to 1.')
      end

      if @remitter_name_kana.nil?
        invalid_properties.push('invalid value for "remitter_name_kana", remitter_name_kana cannot be nil.')
      end

      if @remitter_name_kana.to_s.length > 48
        invalid_properties.push('invalid value for "remitter_name_kana", the character length must be smaller than or equal to 48.')
      end

      if @remitter_name_kana.to_s.length < 1
        invalid_properties.push('invalid value for "remitter_name_kana", the character length must be great than or equal to 1.')
      end

      if @payment_bank_name.nil?
        invalid_properties.push('invalid value for "payment_bank_name", payment_bank_name cannot be nil.')
      end

      if @payment_bank_name.to_s.length > 30
        invalid_properties.push('invalid value for "payment_bank_name", the character length must be smaller than or equal to 30.')
      end

      if @payment_bank_name.to_s.length < 1
        invalid_properties.push('invalid value for "payment_bank_name", the character length must be great than or equal to 1.')
      end

      if @payment_branch_name.nil?
        invalid_properties.push('invalid value for "payment_branch_name", payment_branch_name cannot be nil.')
      end

      if @payment_branch_name.to_s.length > 15
        invalid_properties.push('invalid value for "payment_branch_name", the character length must be smaller than or equal to 15.')
      end

      if @payment_branch_name.to_s.length < 1
        invalid_properties.push('invalid value for "payment_branch_name", the character length must be great than or equal to 1.')
      end

      if @partner_name.nil?
        invalid_properties.push('invalid value for "partner_name", partner_name cannot be nil.')
      end

      if @partner_name.to_s.length > 50
        invalid_properties.push('invalid value for "partner_name", the character length must be smaller than or equal to 50.')
      end

      if @partner_name.to_s.length < 1
        invalid_properties.push('invalid value for "partner_name", the character length must be great than or equal to 1.')
      end

      if !@remarks.nil? && @remarks.to_s.length > 255
        invalid_properties.push('invalid value for "remarks", the character length must be smaller than or equal to 255.')
      end

      if !@remarks.nil? && @remarks.to_s.length < 1
        invalid_properties.push('invalid value for "remarks", the character length must be great than or equal to 1.')
      end

      if @item_key.nil?
        invalid_properties.push('invalid value for "item_key", item_key cannot be nil.')
      end

      if @item_key.to_s.length > 24
        invalid_properties.push('invalid value for "item_key", the character length must be smaller than or equal to 24.')
      end

      if @item_key.to_s.length < 1
        invalid_properties.push('invalid value for "item_key", the character length must be great than or equal to 1.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @va_id.nil?
      return false if @va_id.to_s.length > 10
      return false if @va_id.to_s.length < 10
      return false if @transaction_date.nil?
      return false if @transaction_date.to_s.length > 10
      return false if @transaction_date.to_s.length < 10
      return false if @value_date.nil?
      return false if @value_date.to_s.length > 10
      return false if @value_date.to_s.length < 10
      return false if @va_branch_code.nil?
      return false if @va_branch_code.to_s.length > 3
      return false if @va_branch_code.to_s.length < 3
      return false if @va_branch_name_kana.nil?
      return false if @va_branch_name_kana.to_s.length > 15
      return false if @va_branch_name_kana.to_s.length < 1
      return false if @va_account_number.nil?
      return false if @va_account_number.to_s.length > 7
      return false if @va_account_number.to_s.length < 7
      return false if @va_account_name_kana.nil?
      return false if @va_account_name_kana.to_s.length > 40
      return false if @va_account_name_kana.to_s.length < 1
      return false if @deposit_amount.nil?
      return false if @deposit_amount.to_s.length > 20
      return false if @deposit_amount.to_s.length < 1
      return false if @remitter_name_kana.nil?
      return false if @remitter_name_kana.to_s.length > 48
      return false if @remitter_name_kana.to_s.length < 1
      return false if @payment_bank_name.nil?
      return false if @payment_bank_name.to_s.length > 30
      return false if @payment_bank_name.to_s.length < 1
      return false if @payment_branch_name.nil?
      return false if @payment_branch_name.to_s.length > 15
      return false if @payment_branch_name.to_s.length < 1
      return false if @partner_name.nil?
      return false if @partner_name.to_s.length > 50
      return false if @partner_name.to_s.length < 1
      return false if !@remarks.nil? && @remarks.to_s.length > 255
      return false if !@remarks.nil? && @remarks.to_s.length < 1
      return false if @item_key.nil?
      return false if @item_key.to_s.length > 24
      return false if @item_key.to_s.length < 1
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] va_id Value to be assigned
    def va_id=(va_id)
      if va_id.nil?
        fail ArgumentError, 'va_id cannot be nil'
      end

      if va_id.to_s.length > 10
        fail ArgumentError, 'invalid value for "va_id", the character length must be smaller than or equal to 10.'
      end

      if va_id.to_s.length < 10
        fail ArgumentError, 'invalid value for "va_id", the character length must be great than or equal to 10.'
      end

      @va_id = va_id
    end

    # Custom attribute writer method with validation
    # @param [Object] transaction_date Value to be assigned
    def transaction_date=(transaction_date)
      if transaction_date.nil?
        fail ArgumentError, 'transaction_date cannot be nil'
      end

      if transaction_date.to_s.length > 10
        fail ArgumentError, 'invalid value for "transaction_date", the character length must be smaller than or equal to 10.'
      end

      if transaction_date.to_s.length < 10
        fail ArgumentError, 'invalid value for "transaction_date", the character length must be great than or equal to 10.'
      end

      @transaction_date = transaction_date
    end

    # Custom attribute writer method with validation
    # @param [Object] value_date Value to be assigned
    def value_date=(value_date)
      if value_date.nil?
        fail ArgumentError, 'value_date cannot be nil'
      end

      if value_date.to_s.length > 10
        fail ArgumentError, 'invalid value for "value_date", the character length must be smaller than or equal to 10.'
      end

      if value_date.to_s.length < 10
        fail ArgumentError, 'invalid value for "value_date", the character length must be great than or equal to 10.'
      end

      @value_date = value_date
    end

    # Custom attribute writer method with validation
    # @param [Object] va_branch_code Value to be assigned
    def va_branch_code=(va_branch_code)
      if va_branch_code.nil?
        fail ArgumentError, 'va_branch_code cannot be nil'
      end

      if va_branch_code.to_s.length > 3
        fail ArgumentError, 'invalid value for "va_branch_code", the character length must be smaller than or equal to 3.'
      end

      if va_branch_code.to_s.length < 3
        fail ArgumentError, 'invalid value for "va_branch_code", the character length must be great than or equal to 3.'
      end

      @va_branch_code = va_branch_code
    end

    # Custom attribute writer method with validation
    # @param [Object] va_branch_name_kana Value to be assigned
    def va_branch_name_kana=(va_branch_name_kana)
      if va_branch_name_kana.nil?
        fail ArgumentError, 'va_branch_name_kana cannot be nil'
      end

      if va_branch_name_kana.to_s.length > 15
        fail ArgumentError, 'invalid value for "va_branch_name_kana", the character length must be smaller than or equal to 15.'
      end

      if va_branch_name_kana.to_s.length < 1
        fail ArgumentError, 'invalid value for "va_branch_name_kana", the character length must be great than or equal to 1.'
      end

      @va_branch_name_kana = va_branch_name_kana
    end

    # Custom attribute writer method with validation
    # @param [Object] va_account_number Value to be assigned
    def va_account_number=(va_account_number)
      if va_account_number.nil?
        fail ArgumentError, 'va_account_number cannot be nil'
      end

      if va_account_number.to_s.length > 7
        fail ArgumentError, 'invalid value for "va_account_number", the character length must be smaller than or equal to 7.'
      end

      if va_account_number.to_s.length < 7
        fail ArgumentError, 'invalid value for "va_account_number", the character length must be great than or equal to 7.'
      end

      @va_account_number = va_account_number
    end

    # Custom attribute writer method with validation
    # @param [Object] va_account_name_kana Value to be assigned
    def va_account_name_kana=(va_account_name_kana)
      if va_account_name_kana.nil?
        fail ArgumentError, 'va_account_name_kana cannot be nil'
      end

      if va_account_name_kana.to_s.length > 40
        fail ArgumentError, 'invalid value for "va_account_name_kana", the character length must be smaller than or equal to 40.'
      end

      if va_account_name_kana.to_s.length < 1
        fail ArgumentError, 'invalid value for "va_account_name_kana", the character length must be great than or equal to 1.'
      end

      @va_account_name_kana = va_account_name_kana
    end

    # Custom attribute writer method with validation
    # @param [Object] deposit_amount Value to be assigned
    def deposit_amount=(deposit_amount)
      if deposit_amount.nil?
        fail ArgumentError, 'deposit_amount cannot be nil'
      end

      if deposit_amount.to_s.length > 20
        fail ArgumentError, 'invalid value for "deposit_amount", the character length must be smaller than or equal to 20.'
      end

      if deposit_amount.to_s.length < 1
        fail ArgumentError, 'invalid value for "deposit_amount", the character length must be great than or equal to 1.'
      end

      @deposit_amount = deposit_amount
    end

    # Custom attribute writer method with validation
    # @param [Object] remitter_name_kana Value to be assigned
    def remitter_name_kana=(remitter_name_kana)
      if remitter_name_kana.nil?
        fail ArgumentError, 'remitter_name_kana cannot be nil'
      end

      if remitter_name_kana.to_s.length > 48
        fail ArgumentError, 'invalid value for "remitter_name_kana", the character length must be smaller than or equal to 48.'
      end

      if remitter_name_kana.to_s.length < 1
        fail ArgumentError, 'invalid value for "remitter_name_kana", the character length must be great than or equal to 1.'
      end

      @remitter_name_kana = remitter_name_kana
    end

    # Custom attribute writer method with validation
    # @param [Object] payment_bank_name Value to be assigned
    def payment_bank_name=(payment_bank_name)
      if payment_bank_name.nil?
        fail ArgumentError, 'payment_bank_name cannot be nil'
      end

      if payment_bank_name.to_s.length > 30
        fail ArgumentError, 'invalid value for "payment_bank_name", the character length must be smaller than or equal to 30.'
      end

      if payment_bank_name.to_s.length < 1
        fail ArgumentError, 'invalid value for "payment_bank_name", the character length must be great than or equal to 1.'
      end

      @payment_bank_name = payment_bank_name
    end

    # Custom attribute writer method with validation
    # @param [Object] payment_branch_name Value to be assigned
    def payment_branch_name=(payment_branch_name)
      if payment_branch_name.nil?
        fail ArgumentError, 'payment_branch_name cannot be nil'
      end

      if payment_branch_name.to_s.length > 15
        fail ArgumentError, 'invalid value for "payment_branch_name", the character length must be smaller than or equal to 15.'
      end

      if payment_branch_name.to_s.length < 1
        fail ArgumentError, 'invalid value for "payment_branch_name", the character length must be great than or equal to 1.'
      end

      @payment_branch_name = payment_branch_name
    end

    # Custom attribute writer method with validation
    # @param [Object] partner_name Value to be assigned
    def partner_name=(partner_name)
      if partner_name.nil?
        fail ArgumentError, 'partner_name cannot be nil'
      end

      if partner_name.to_s.length > 50
        fail ArgumentError, 'invalid value for "partner_name", the character length must be smaller than or equal to 50.'
      end

      if partner_name.to_s.length < 1
        fail ArgumentError, 'invalid value for "partner_name", the character length must be great than or equal to 1.'
      end

      @partner_name = partner_name
    end

    # Custom attribute writer method with validation
    # @param [Object] remarks Value to be assigned
    def remarks=(remarks)
      if !remarks.nil? && remarks.to_s.length > 255
        fail ArgumentError, 'invalid value for "remarks", the character length must be smaller than or equal to 255.'
      end

      if !remarks.nil? && remarks.to_s.length < 1
        fail ArgumentError, 'invalid value for "remarks", the character length must be great than or equal to 1.'
      end

      @remarks = remarks
    end

    # Custom attribute writer method with validation
    # @param [Object] item_key Value to be assigned
    def item_key=(item_key)
      if item_key.nil?
        fail ArgumentError, 'item_key cannot be nil'
      end

      if item_key.to_s.length > 24
        fail ArgumentError, 'invalid value for "item_key", the character length must be smaller than or equal to 24.'
      end

      if item_key.to_s.length < 1
        fail ArgumentError, 'invalid value for "item_key", the character length must be great than or equal to 1.'
      end

      @item_key = item_key
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          va_id == o.va_id &&
          transaction_date == o.transaction_date &&
          value_date == o.value_date &&
          va_branch_code == o.va_branch_code &&
          va_branch_name_kana == o.va_branch_name_kana &&
          va_account_number == o.va_account_number &&
          va_account_name_kana == o.va_account_name_kana &&
          deposit_amount == o.deposit_amount &&
          remitter_name_kana == o.remitter_name_kana &&
          payment_bank_name == o.payment_bank_name &&
          payment_branch_name == o.payment_branch_name &&
          partner_name == o.partner_name &&
          remarks == o.remarks &&
          item_key == o.item_key
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [va_id, transaction_date, value_date, va_branch_code, va_branch_name_kana, va_account_number, va_account_name_kana, deposit_amount, remitter_name_kana, payment_bank_name, payment_branch_name, partner_name, remarks, item_key].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = SwaggerClient.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
